buildscript {
    ext.kotlin_version = '1.2.71'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "1.2.71"

    // create start scripts
    // is executed on "build" task but not on e.g. "jar" task
    id 'application'

    // bundle all dependencies into one fat shadowed jar
    // (gets automatically triggered when application plugin is present)
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

group 'de.debuglevel.walkingdinner'
version '0.0.1-SNAPSHOT'

// application plugin configuration
applicationName = "Walking-Dinner REST Microservice"
mainClassName = 'de.debuglevel.walkingdinner.rest.RestServerKt'

sourceCompatibility = 1.8

repositories {
    jcenter()
    maven {
        url "https://dl.bintray.com/debuglevel/maven"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Testing
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testCompile 'org.assertj:assertj-core:3.10.0'

    // Logging
    // see http://saltnlight5.blogspot.com/2013/08/how-to-configure-slf4j-with-different.html for a quick introduction to slf4j
    compile 'io.github.microutils:kotlin-logging:1.4.9'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:slf4j-simple:1.7.5'

    // Spark (REST server)
    compile 'com.sparkjava:spark-kotlin:1.0.0-alpha'
    compile 'de.debuglevel.sparkmicroserviceutils:sparkmicroserviceutils:0.0.20'

    // JSON
    compile 'com.google.code.gson:gson:2.8.4'

    // khttp (HTTP client)
    //compile 'com.github.jkcclemens:khttp:-SNAPSHOT'

    // Template Engine
    //compile 'com.sparkjava:spark-template-mustache:2.7.1'

    // project dependencies
    compile project(':geneticplanner')
}

// jar configuration is still needed (despite of application plugin) to add Manifest to traditional jar
jar {
    manifest {
        attributes 'Implementation-Title': applicationName,
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

// for Heroku: create a "stage" task which simply executes "build"
task stage(dependsOn: ['clean', 'build'])
build.mustRunAfter clean