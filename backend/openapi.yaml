openapi: 3.0.1
info:
  title: Walking-Dinner Microservice
  description: Microservice for walking dinner
  contact:
    name: Marc Kohaupt
    url: http://debuglevel.de
    email: debuglevel at gmail.com
  license:
    name: Unlicense
    url: https://unlicense.org/
  version: 0.0.1
paths:
  /dinners:
    get:
      operationId: getList
      parameters: [ ]
      responses:
        "200":
          description: getList 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DinnerResponse'
    post:
      operationId: postOne
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - dinnerRequest
              type: object
              properties:
                dinnerRequest:
                  $ref: '#/components/schemas/DinnerRequest'
        required: true
      responses:
        "200":
          description: postOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DinnerResponse'
  /dinners/{dinnerId}:
    get:
      operationId: getOne
      parameters:
        - name: dinnerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DinnerResponse'
  /organisations:
    get:
      operationId: getList_1
      parameters: [ ]
      responses:
        "200":
          description: getList_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganisationResponse'
    post:
      operationId: postOne_1
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - organisationRequest
              type: object
              properties:
                organisationRequest:
                  $ref: '#/components/schemas/OrganisationRequest'
        required: true
      responses:
        "200":
          description: postOne_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponse'
  /organisations/{organisationId}:
    get:
      operationId: getOne_1
      parameters:
        - name: organisationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOne_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponse'
  /plans:
    get:
      operationId: getList_2
      parameters: [ ]
      responses:
        "200":
          description: getList_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /plans/calculations:
    get:
      operationId: getList_3
      parameters: [ ]
      responses:
        "200":
          description: getList_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CalculationResponse'
    post:
      operationId: postOne_2
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - calculationRequest
              type: object
              properties:
                calculationRequest:
                  $ref: '#/components/schemas/CalculationRequest'
        required: true
      responses:
        "200":
          description: postOne_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculationResponse'
  /plans/calculations/{calculationId}:
    get:
      operationId: getOne_2
      parameters:
        - name: calculationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOne_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculationResponse'
  /plans/reports/gmail/{planId}:
    post:
      operationId: postOneGmailReport
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: postOneGmailReport 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GmailDraftsReport'
  /plans/reports/gmail/{reportId}:
    get:
      operationId: getOneGmailReport
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOneGmailReport 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GmailDraftsReport'
  /plans/reports/mails/{planId}:
    get:
      summary: Downloads a .zip with .eml mails for all teams.
      description: Downloads a .zip with .eml mails for all teams.
      operationId: getAllMail
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          content:
            application/zip:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /plans/reports/summary/{planId}:
    get:
      operationId: getOnePlaintext
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOnePlaintext 200 response
          content:
            text/plain:
              schema:
                type: string
  /plans/{planId}:
    get:
      operationId: getOne_3
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOne_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
  /teams:
    get:
      operationId: getList_4
      parameters: [ ]
      responses:
        "200":
          description: getList_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamResponse'
    post:
      operationId: postOne_3
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - teamRequest
              type: object
              properties:
                teamRequest:
                  $ref: '#/components/schemas/TeamRequest'
        required: true
      responses:
        "200":
          description: postOne_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
  /teams/{teamId}:
    get:
      operationId: getOne_4
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: getOne_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
components:
  schemas:
    Calculation:
      required:
        - teams
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        finished:
          type: boolean
        populationSize:
          type: integer
          format: int32
        fitnessThreshold:
          type: number
          format: double
        steadyFitness:
          type: integer
          format: int32
        plan:
          allOf:
            - $ref: '#/components/schemas/Plan'
            - nullable: true
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        calculationId:
          type: string
          format: uuid
          nullable: true
        begin:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
    CalculationRequest:
      type: object
      properties:
        surveyfile:
          type: string
          nullable: true
        populationSize:
          type: integer
          format: int32
        fitnessThreshold:
          type: number
          format: double
        steadyFitness:
          type: integer
          format: int32
        dinnerId:
          type: string
          format: uuid
          nullable: true
    CalculationResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        finished:
          type: boolean
        populationSize:
          type: integer
          format: int32
        fitnessThreshold:
          type: number
          format: double
        steadyFitness:
          type: integer
          format: int32
        planId:
          type: string
          format: uuid
          nullable: true
        begin:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
    Cook:
      required:
        - mailAddress
        - name
        - phoneNumber
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - nullable: true
        mailAddress:
          allOf:
            - $ref: '#/components/schemas/MailAddress'
            - nullable: true
        phoneNumber:
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
            - nullable: true
    CookingCapability:
      type: string
      enum:
        - VeganAppetizer
        - VeganMaindish
        - VeganDessert
        - VegetarianAppetizer
        - VegetarianMaindish
        - VegetarianDessert
        - OmnivoreAppetizer
        - OmnivoreMaindish
        - OmnivoreDessert
    Diet:
      type: string
      enum:
        - Vegan
        - Vegetarian
        - Omnivore
    Dinner:
      required:
        - begin
        - calculations
        - city
        - name
        - organisation
        - teams
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        calculations:
          type: array
          items:
            $ref: '#/components/schemas/Calculation'
        city:
          type: string
        begin:
          type: string
          format: date-time
        organisation:
          allOf:
            - $ref: '#/components/schemas/Organisation'
            - nullable: true
    DinnerRequest:
      required:
        - begin
        - city
        - name
        - organisationId
      type: object
      properties:
        name:
          type: string
        city:
          type: string
        begin:
          type: string
          format: date-time
        organisationId:
          type: string
          format: uuid
    DinnerResponse:
      required:
        - begin
        - city
        - id
        - name
        - organisationId
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        city:
          type: string
        begin:
          type: string
          format: date-time
        organisationId:
          type: string
          format: uuid
    GmailDraftsReport:
      required:
        - drafts
        - plan
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        plan:
          $ref: '#/components/schemas/Plan'
        drafts:
          type: array
          items:
            type: object
            additionalProperties: true
    Location:
      required:
        - address
      type: object
      properties:
        address:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
        id:
          type: string
          format: uuid
          nullable: true
    MailAddress:
      required:
        - value
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        value:
          type: string
    Meeting:
      required:
        - cookingTeam
        - course
        - teams
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        course:
          type: string
        id:
          type: string
          format: uuid
          nullable: true
        cookingTeam:
          $ref: '#/components/schemas/Team'
    Name:
      required:
        - abbreviatedName
        - firstname
        - lastname
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        abbreviatedName:
          type: string
    Organisation:
      required:
        - dinners
        - mail
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        mail:
          allOf:
            - $ref: '#/components/schemas/MailAddress'
            - nullable: true
        name:
          type: string
        dinners:
          type: array
          items:
            $ref: '#/components/schemas/Dinner'
    OrganisationRequest:
      required:
        - mail
        - name
      type: object
      properties:
        name:
          type: string
        mail:
          type: string
    OrganisationResponse:
      required:
        - mail
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        mail:
          type: string
        name:
          type: string
    PhoneNumber:
      required:
        - number
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        number:
          type: string
    Plan:
      required:
        - additionalInformation
        - meetings
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        meetings:
          type: array
          items:
            $ref: '#/components/schemas/Meeting'
        additionalInformation:
          type: string
    Team:
      required:
        - address
        - city
        - cook1
        - cook2
        - cookingCapabilities
        - cooks
        - diet
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        cook1:
          allOf:
            - $ref: '#/components/schemas/Cook'
            - nullable: true
        cook2:
          allOf:
            - $ref: '#/components/schemas/Cook'
            - nullable: true
        address:
          type: string
        diet:
          $ref: '#/components/schemas/Diet'
        cookingCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/CookingCapability'
        location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - nullable: true
        city:
          type: string
        dinner:
          allOf:
            - $ref: '#/components/schemas/Dinner'
            - nullable: true
        cooks:
          type: array
          items:
            $ref: '#/components/schemas/Cook'
    TeamRequest:
      required:
        - dinnerId
      type: object
      properties:
        address:
          type: string
          nullable: true
        chef1:
          type: string
          nullable: true
        chef2:
          type: string
          nullable: true
        mail1:
          type: string
          nullable: true
        mail2:
          type: string
          nullable: true
        phone1:
          type: string
          nullable: true
        phone2:
          type: string
          nullable: true
        diet:
          allOf:
            - $ref: '#/components/schemas/Diet'
            - nullable: true
        veganAppetizer:
          type: boolean
          nullable: true
        veganMaindish:
          type: boolean
          nullable: true
        veganDessert:
          type: boolean
          nullable: true
        vegetarianAppetizer:
          type: boolean
          nullable: true
        vegetarianMaindish:
          type: boolean
          nullable: true
        vegetarianDessert:
          type: boolean
          nullable: true
        omnivoreAppetizer:
          type: boolean
          nullable: true
        omnivoreMaindish:
          type: boolean
          nullable: true
        omnivoreDessert:
          type: boolean
          nullable: true
        notes:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        dinnerId:
          type: string
          format: uuid
    TeamResponse:
      required:
        - dinnerId
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        address:
          type: string
          nullable: true
        chef1:
          type: string
          nullable: true
        chef2:
          type: string
          nullable: true
        mail1:
          type: string
          nullable: true
        mail2:
          type: string
          nullable: true
        phone1:
          type: string
          nullable: true
        phone2:
          type: string
          nullable: true
        diet:
          allOf:
            - $ref: '#/components/schemas/Diet'
            - nullable: true
        veganAppetizer:
          type: boolean
          nullable: true
        veganMaindish:
          type: boolean
          nullable: true
        veganDessert:
          type: boolean
          nullable: true
        vegetarianAppetizer:
          type: boolean
          nullable: true
        vegetarianMaindish:
          type: boolean
          nullable: true
        vegetarianDessert:
          type: boolean
          nullable: true
        omnivoreAppetizer:
          type: boolean
          nullable: true
        omnivoreMaindish:
          type: boolean
          nullable: true
        omnivoreDessert:
          type: boolean
          nullable: true
        notes:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        dinnerId:
          type: string
          format: uuid
